{
  "__comment": "all directory and file names are suffixed by",
  "__comment": "the height, width, depth of the volumes",

  "__comment": "size to use for final volumes",
  "height": 24,
  "width": 54,
  "depth": 24,

  "__comment": "suffix for files",
  "suffix": "_test",

  "__comment": "#1 SCALE",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",
  "raw_directory": "/work/data/shapenet/off_cars",
  "scaled_directory": "/work/data/shapenet/off_scaled_test",
  "models_file": "models.txt",
  "whitelist": true,

  "__comment": "rotation along y axis",
  "__comment": "the meshes are aligned, but usually directed in the direction of the x axis",
  "__comment": "i.e. the length of the car corresponds to the x axis",
  "__comment": "to change this, the models can be rotated along the y axis",
  "y_rotation": 180,

  "__comment": "padding in unit cube applied to the largest dimension (i.e. dimension with the largest",
  "__comment": "extents of the CAD model",
  "padding": 0.25,

  "__comment": "#2 WATERTIGHT",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",

  "depth_directory": "/work/data/shapenet/off_depth_test",
  "tsdf_directory": "/work/data/shapenet/off_tsdf_test",
  "watertight_directory": "/work/data/shapenet/off_watertight_test",

  "__comment": "settings for rendering views for making models watertight using fusion",
  "watertight_rendering": {
    "n_views": 100,
    "mesh_center": [
      0,
      0,
      1.5
    ],
    "image_height": 640,
    "image_width": 640,
    "focal_length_x": 860,
    "focal_length_y": 860,
    "principal_point_x": 320,
    "principal_point_y": 320,
    "__comment": "subtract a constant consisting of depth_offset_factor*voxel_size from the depth maps",
    "depth_offset_factor": 1
  },

  "__comment": "fusion parameters for making models watertight",
  "watertight_fusion": {
    "resolution": 256,
    "__comment": "1/resolution (0.00390625 for 256, 0.001953125 for 512)",
    "voxel_size": 0.00390625,
    "__comment": "k*voxel_size for k in [2, ..., 10] (0.02734375 for 256, 0.01171875 fo 512)",
    "truncation": 0.015625
  },

  "__comment": "#3 WATERTIGHT",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",

  "simplified_directory": "/work/data/shapenet/off_simplified_test",
  "simplification_script": "simplification.mlx",

  "__comment": "#4 SPLIT",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",

  "__comment": "contains the models for each training/test set",
  "splitted_directory": "/work/data/shapenet/off_splitted_test",

  "__comment": "fraction of original training set to take (randomly)",
  "number": 2,

  "__comment": "#5 MULTIPLY",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",

  "__comment": "output directory and txt file keeping record",
  "multiplied_directory": "/work/data/shapenet/off_multiplied_test",

  "__comment": "number of random versions of each CAD model",
  "multiplier": 1,

  "__comment": "noise of scale, i.e. scale is changed randomly in [1 - scale_noise, 1 + scale_noise]",
  "max_scale": 0.0,
  "min_scale": 0.0,

  "__comment": "noise around the center, i.e. the origin",
  "min_x_translation": 0,
  "max_x_translation": 0,
  "min_y_translation": 0,
  "max_y_translation": 0,
  "min_z_translation": 0,
  "max_z_translation": 0,

  "__comment": "in low resolutions, an angle of 45 degrees may look skewed",
  "__comment": "this is the rotation for the meshes, for the rendering, a separate rotation",
  "__comment": "is possible which allows to have observations from all sides while the",
  "__comment": "model itself is always oriented similarly",
  "__comment": "maximum rotation around the x axis in degrees",
  "max_x_rotation": 0,
  "__comment": "maximum rotation around the y axis in degrees",
  "max_y_rotation": 0,
  "__comment": "maximum rotation around the z axis in degrees",
  "max_z_rotation": 0,

  "__comment": "#6 VOXELIZE MESHS",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",

  "__comment": "directory for scaled, gt meshes",
  "off_gt_dir": "/work/data/shapenet/test_off_gt",
  "__comment": "h5 file for computed signed distance functions",
  "sdf_file": "/work/data/shapenet/test_sdf",
  "__comment": "h5 file for occupancy derived from signed distance functions",
  "output_file": "/work/data/shapenet/test_outputs",
  "filled_file": "/work/data/shapenet/test_filled",

  "__comment": "#7 RENDER",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",

  "__comment": "randomly sampled rotations for rendering",
  "__comment": "the y rotation allows to 'observe' the car from different sides while",
  "__comment": "the model itself is always oriented similarly",
  "render_max_y_rotation": 180,
  "render_min_y_rotation": -180,
  "__comment": "rendering is done 'upside-down', i.e. max and min are interchanged here!",
  "render_max_x_rotation": 0,
  "render_min_x_rotation": -5,

  "__comment": "number of renderings/observations generated",
  "n_observations": 1,

  "__comment": "note that different tools might operate in different coordinate systems",
  "__comment": "for example, librender has a camera centered at (0, 0, 0) looking in the direction of (0, 0, 1)",

  "__comment": "intrinsic camera parameters for rendering",
  "__comment": "use this animation to set the paramters: http://ksimek.github.io/2013/08/13/intrinsic/",
  "__comment": "note that paramters also need t match z_near, z_far, max_depth_value and mesh_center for good results",
  "__comment": "focal length can be 1.5*image_width and 2.5*image_height",
  "focal_length_x": 96,
  "focal_length_y": 120,
  "principal_point_x": 32,
  "principal_point_y": 24,

  "__comment": "image size for rendering",
  "image_height": 48,
  "image_width": 64,

  "__comment": "depth is rendered between z_near and z_far;",
  "__comment": "as the mesh lives in (-0.5 to 0.5, -0.5 to 0.5, -0.5 to 0.5) and is moved to mesh_center (see below)",
  "__comment": "z_near and z_far are usually mesh_center_z +- 0.5",
  "__comment": "max_depth_value should then correspond to a number between z_near and z_far, usually z_far",

  "__comment": "'nearest' depth value",
  "z_near": 1.5,
  "__comment": "'farthest' depth value",
  "z_far": 2.5,

  "__comment": "maximum depth value used to distinguish background from object",
  "__comment": "corresponds to z_far above or a value below that",
  "__comment": "also see librender/pyrender.pyx for details!",
  "max_depth_value": 2.49,

  "__comment": "translation used from (0, 0, 0) centered mesh to the center in front of the camera",
  "__comment": "the farther away, the higher the resolution should be for appropriate resolution of point clouds",
  "mesh_center_x": 0,
  "mesh_center_y": 0,
  "mesh_center_z": 2,

  "__comment": "h5 file for the depth maps",
  "depth_file": "/work/data/shapenet/test_depth",
  "__comment": "h5 file for rendering rotations",
  "render_orientation_file": "/work/data/shapenet/test_angles",

  "__comment": "#8 VOXELIZE CLOUDS",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",

  "__comment": "lambda of en exponential distribution to add random noise to the depth values",
  "lambda": 0,

  "__comment": "probability of ignoring a ray, i.e. go through the ray with maximum depth",
  "ignore": 0.0,

  "__comment": "directory for scaled, gt point clouds",
  "txt_gt_dir": "/work/data/shapenet/test_txt_gt",
  "__comment": "h5 file for voxelized point clouds and corresponding distance transforms",
  "input_file": "/work/data/shapenet/test_inputs",
  "input_sdf_file": "/work/data/shapenet/test_inputs_sdf",

  "__comment": "h5 file for voxelized free space and corresponding distance transforms",
  "space_file": "/work/data/shapenet/test_space",

  "__comment": "#9 POST PROCESS",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",

  "__comment": "truncation thresholds for SDF",
  "truncation": 5,
  "__comment": "h5 file for truncated SDF",
  "tsdf_file": "/work/data/shapenet/test_tsdf",
  "__comment": "h5 file for log-truncated SDF",
  "ltsdf_file": "/work/data/shapenet/test_ltsdf",
  "__comment": "h5 file for truncated SDF",
  "input_tsdf_file": "/work/data/shapenet/test_inputs_tsdf",
  "__comment": "h5 file for log-truncated SDF",
  "input_ltsdf_file": "/work/data/shapenet/test_inputs_ltsdf",

  "__comment": "#10 RECONSTRUCT",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",

  "reconstructed_dir": "/work/data/shapenet/test_off_rec",

  "__comment": "#12 VISUALIZE",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",

  "vis_dir": "/work/data/shapenet/test_vis",

  "__comment": "#13 PLY OBSERVATIONS",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",

  "ply_gt_dir": "/work/data/shapenet/test_ply_gt",

  "__comment": "#15 STATISTICS",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",

  "ply_gt_dir": "/work/data/shapenet/test_statistics",

  "__comment": "#1 SCALE",
  "__comment": "--------- --------- --------- --------- --------- --------- --------- ---------",

  "__comment": "this is a 1-based list of indices corresponding to invalid models in models_file",
  "__comment": "which are to be sorted out",
  "whitelist_models": [
    3,
    8,
    10,
    14,
    18,
    20,
    24,
    28,
    30,
    34,
    37,
    44,
    46,
    51,
    55,
    63,
    66,
    73,
    76,
    82,
    83,
    96,
    97,
    99,
    102,
    104,
    107,
    111,
    137,
    140,
    149,
    152,
    158,
    161,
    165,
    181,
    194,
    200,
    206,
    228,
    238,
    244,
    245,
    248,
    249,
    250,
    254,
    259,
    262,
    273,
    278,
    280,
    282,
    287,
    288,
    296,
    304,
    308,
    311,
    314,
    317,
    322,
    324,
    325,
    328,
    329,
    333,
    337,
    342,
    343,
    346,
    351,
    359,
    360,
    361,
    362,
    373,
    378,
    379,
    381,
    383,
    390,
    394,
    406,
    411,
    412,
    414,
    428,
    430,
    437,
    439,
    446,
    454,
    456,
    460,
    464,
    465,
    474,
    479,
    487,
    488,
    491,
    498,
    499,
    500,
    509,
    518,
    520,
    535,
    546,
    556,
    561,
    564,
    566,
    572,
    574,
    579,
    587,
    590,
    595,
    596,
    611,
    624,
    631,
    634,
    636,
    655,
    657,
    661,
    664,
    667,
    672,
    708,
    710,
    711,
    716,
    723,
    725,
    729,
    747,
    756,
    757,
    758,
    762,
    768,
    781,
    792,
    802,
    807,
    814,
    817,
    822,
    826,
    828,
    832,
    839,
    847,
    850,
    854,
    855,
    859,
    884,
    890,
    891,
    892,
    895,
    902,
    903,
    904,
    905,
    906,
    907,
    909,
    913,
    915,
    918,
    923,
    930,
    932,
    941,
    945,
    948,
    950,
    953,
    959,
    963,
    964,
    972,
    975,
    982,
    992,
    996,
    999,
    1003,
    1004,
    1012,
    1016,
    1019,
    1023,
    1026,
    1035,
    1037,
    1043,
    1048,
    1050,
    1052,
    1059,
    1061,
    1062,
    1071,
    1078,
    1080,
    1091,
    1096,
    1098,
    1101,
    1104,
    1105,
    1111,
    1123
  ],
  "whitelist_models": [
    3,
    8,
    10,
    14,
    18,
    20,
    24,
    28,
    30,
    34
  ],
  "blacklist_models": [
    23,
    32,
    47,
    87,
    93,
    109,
    127,
    138,
    142,
    190,
    204,
    210,
    211,
    239,
    261,
    275,
    293,
    336,
    353,
    380,
    408,
    428,
    429,
    435,
    463,
    503,
    507,
    533,
    551,
    565,
    579,
    600,
    602,
    630,
    633,
    642,
    653,
    663,
    673,
    705,
    707,
    737,
    745,
    753,
    800,
    808,
    811,
    812,
    821,
    834,
    846,
    848,
    851,
    855,
    857,
    866,
    873,
    927,
    931,
    959,
    961,
    967,
    974,
    975,
    987,
    995,
    1001,
    1005,
    1022,
    1027,
    1030,
    1039,
    1051,
    1053,
    1058,
    1063,
    1082,
    1090,
    1093,
    1114,
    1136,
    1139,
    1154,
    1187,
    1194,
    1195,
    1202,
    1221,
    2131,
    1240,
    1246,
    1259,
    1267,
    1282,
    1291,
    1364,
    1373,
    1378,
    1406,
    1423,
    1425,
    1433,
    1441,
    1444,
    1450,
    1455,
    1458,
    1473,
    1481,
    1482,
    1490,
    1501,
    1508,
    1515,
    1527,
    1561,
    1567,
    1608,
    1622,
    1633,
    1645,
    1659,
    1665,
    1688,
    1693,
    1707,
    1713,
    1728,
    1731,
    1743,
    1754,
    1756,
    1762,
    1766,
    1785,
    1820,
    1832,
    1837,
    1845,
    1848,
    1852,
    1855,
    1860,
    1889,
    1890,
    1896,
    1914,
    1922,
    1927,
    1948,
    1950,
    1955,
    1977,
    1990,
    1997,
    2001,
    2027,
    2031,
    2033,
    2037,
    2060,
    2088,
    2094,
    2097,
    2112,
    2131,
    2133,
    2134,
    2140,
    2155,
    2160,
    2171,
    2185,
    2186,
    2257,
    2258 ,
    2275,
    2281,
    2291,
    2297,
    2303,
    2031,
    2306,
    2335,
    2346,
    2370,
    2373,
    2396,
    2400,
    2424,
    2446,
    2513,
    2518,
    2522,
    2555,
    2558,
    2562,
    2580,
    2613,
    2664,
    2689,
    2702,
    2704,
    2720,
    2726,
    2730,
    2741,
    2754,
    2773,
    2778,
    2795,
    2806,
    2814,
    2835,
    2842,
    2884,
    2887,
    2897,
    2907,
    2916,
    2941,
    2963,
    2964,
    2984,
    2996,
    2998,
    3019,
    3054,
    3076,
    3077,
    2085,
    3091,
    3106,
    3115,
    3127,
    3136,
    3141,
    3144,
    3151,
    3152,
    3175,
    3186,
    3214,
    3216,
    3221,
    3241,
    3274,
    3282,
    3291,
    3321,
    3369,
    3376,
    3377,
    3381,
    3395,
    3397,
    3410,
    3420,
    3450,
    3495,
    3498,
    3507
  ]
}
